package p2018.backend.entities;

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;

import org.springframework.security.crypto.bcrypt.BCrypt;

@Entity
@Table(name = "XUser")
public class User extends AuditableEntity implements Serializable {


	private static final long serialVersionUID = 5234562641511067060L;
	
	private String firstname;
	private String lastname;
	private String avatarUrl;
	private String dni;
	private Boolean isInternal;
	private Boolean accountConfirmed;
	private Boolean active;
	private Integer orderCount;
	private String username;
	private String password;
	private Boolean emailVerified;
	private String verificationToken;
	
	@OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "institutionId")
	private Institution institution;
	
	@ManyToMany(cascade = { CascadeType.ALL })
    @JoinTable(
        name = "XRoleMapping", 
        joinColumns = { @JoinColumn(name = "principalId") }, 
        inverseJoinColumns = { @JoinColumn(name = "roleId")}
    )
	private Set<Role> roles = new HashSet<>();

	public String getFirstname() {
		return firstname;
	}

	public void setFirstname(String firstname) {
		this.firstname = firstname;
	}

	public String getLastname() {
		return lastname;
	}

	public void setLastname(String lastname) {
		this.lastname = lastname;
	}

	public String getAvatarUrl() {
		return avatarUrl;
	}

	public void setAvatarUrl(String avatarUrl) {
		this.avatarUrl = avatarUrl;
	}

	public String getDni() {
		return dni;
	}

	public void setDni(String dni) {
		this.dni = dni;
	}

	public Boolean getIsInternal() {
		return isInternal;
	}

	public void setIsInternal(Boolean isInternal) {
		this.isInternal = isInternal;
	}

	public Boolean getAccountConfirmed() {
		return accountConfirmed;
	}

	public void setAccountConfirmed(Boolean accountConfirmed) {
		this.accountConfirmed = accountConfirmed;
	}

	public Boolean getActive() {
		return active;
	}

	public void setActive(Boolean active) {
		this.active = active;
	}

	public Integer getOrderCount() {
		return orderCount;
	}

	public void setOrderCount(Integer orderCount) {
		this.orderCount = orderCount;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public Boolean getEmailVerified() {
		return emailVerified;
	}

	public void setEmailVerified(Boolean emailVerified) {
		this.emailVerified = emailVerified;
	}

	public String getVerificationToken() {
		return verificationToken;
	}

	public void setVerificationToken(String verificationToken) {
		this.verificationToken = verificationToken;
	}

	public Institution getInstitution() {
		return institution;
	}

	public void setInstitution(Institution institution) {
		this.institution = institution;
	}
	

	public Set<Role> getRoles() {
		return roles;
	}

	public void setRoles(Set<Role> roles) {
		this.roles = roles;
	}

	@Override
	public String toString() {
		return "User [firstname=" + firstname + ", lastname=" + lastname + ", dni=" + dni + ", active=" + active
				+ ", username=" + username + "]";
	}

	public User(String firstname, String lastname, String avatarUrl, String dni, Boolean isInternal,
			Boolean accountConfirmed, Boolean active, Integer orderCount, String username, String password,
			Boolean emailVerified, String verificationToken, Institution institution) {
		
		this.firstname = firstname;
		this.lastname = lastname;
		this.avatarUrl = avatarUrl;
		this.dni = dni;
		this.isInternal = isInternal;
		this.accountConfirmed = accountConfirmed;
		this.active = active;
		this.orderCount = orderCount;
		this.username = username;
		this.password = password;
		this.emailVerified = emailVerified;
		this.verificationToken = verificationToken;
		this.institution = institution;
	}

	public User() {
	
	}
	

}
